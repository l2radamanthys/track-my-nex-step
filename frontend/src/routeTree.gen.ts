/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserRouteImport } from './routes/user'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as UserProfileEditRouteImport } from './routes/user/profile-edit'
import { Route as UserProfileRouteImport } from './routes/user/profile'
import { Route as UserChangePasswordRouteImport } from './routes/user/change-password'
import { Route as UserAppearanceRouteImport } from './routes/user/appearance'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthResetPasswordRouteImport } from './routes/auth/reset-password'
import { Route as AuthRecoverPasswordRouteImport } from './routes/auth/recover-password'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as AdminUsersIndexRouteImport } from './routes/admin/users/index'
import { Route as AdminRolesIndexRouteImport } from './routes/admin/roles/index'

const UserRoute = UserRouteImport.update({
  id: '/user',
  path: '/user',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const UserProfileEditRoute = UserProfileEditRouteImport.update({
  id: '/profile-edit',
  path: '/profile-edit',
  getParentRoute: () => UserRoute,
} as any)
const UserProfileRoute = UserProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => UserRoute,
} as any)
const UserChangePasswordRoute = UserChangePasswordRouteImport.update({
  id: '/change-password',
  path: '/change-password',
  getParentRoute: () => UserRoute,
} as any)
const UserAppearanceRoute = UserAppearanceRouteImport.update({
  id: '/appearance',
  path: '/appearance',
  getParentRoute: () => UserRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthResetPasswordRoute = AuthResetPasswordRouteImport.update({
  id: '/auth/reset-password',
  path: '/auth/reset-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRecoverPasswordRoute = AuthRecoverPasswordRouteImport.update({
  id: '/auth/recover-password',
  path: '/auth/recover-password',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminUsersIndexRoute = AdminUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminRolesIndexRoute = AdminRolesIndexRouteImport.update({
  id: '/roles/',
  path: '/roles/',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/recover-password': typeof AuthRecoverPasswordRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signup': typeof AuthSignupRoute
  '/user/appearance': typeof UserAppearanceRoute
  '/user/change-password': typeof UserChangePasswordRoute
  '/user/profile': typeof UserProfileRoute
  '/user/profile-edit': typeof UserProfileEditRoute
  '/': typeof LayoutIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/auth': typeof AuthIndexRoute
  '/admin/roles': typeof AdminRolesIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
}
export interface FileRoutesByTo {
  '/user': typeof UserRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/recover-password': typeof AuthRecoverPasswordRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signup': typeof AuthSignupRoute
  '/user/appearance': typeof UserAppearanceRoute
  '/user/change-password': typeof UserChangePasswordRoute
  '/user/profile': typeof UserProfileRoute
  '/user/profile-edit': typeof UserProfileEditRoute
  '/': typeof LayoutIndexRoute
  '/admin': typeof AdminIndexRoute
  '/auth': typeof AuthIndexRoute
  '/admin/roles': typeof AdminRolesIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/user': typeof UserRouteWithChildren
  '/admin/dashboard': typeof AdminDashboardRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/recover-password': typeof AuthRecoverPasswordRoute
  '/auth/reset-password': typeof AuthResetPasswordRoute
  '/auth/signup': typeof AuthSignupRoute
  '/user/appearance': typeof UserAppearanceRoute
  '/user/change-password': typeof UserChangePasswordRoute
  '/user/profile': typeof UserProfileRoute
  '/user/profile-edit': typeof UserProfileEditRoute
  '/_layout/': typeof LayoutIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/auth/': typeof AuthIndexRoute
  '/admin/roles/': typeof AdminRolesIndexRoute
  '/admin/users/': typeof AdminUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/user'
    | '/admin/dashboard'
    | '/auth/login'
    | '/auth/recover-password'
    | '/auth/reset-password'
    | '/auth/signup'
    | '/user/appearance'
    | '/user/change-password'
    | '/user/profile'
    | '/user/profile-edit'
    | '/'
    | '/admin/'
    | '/auth'
    | '/admin/roles'
    | '/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/user'
    | '/admin/dashboard'
    | '/auth/login'
    | '/auth/recover-password'
    | '/auth/reset-password'
    | '/auth/signup'
    | '/user/appearance'
    | '/user/change-password'
    | '/user/profile'
    | '/user/profile-edit'
    | '/'
    | '/admin'
    | '/auth'
    | '/admin/roles'
    | '/admin/users'
  id:
    | '__root__'
    | '/_layout'
    | '/admin'
    | '/user'
    | '/admin/dashboard'
    | '/auth/login'
    | '/auth/recover-password'
    | '/auth/reset-password'
    | '/auth/signup'
    | '/user/appearance'
    | '/user/change-password'
    | '/user/profile'
    | '/user/profile-edit'
    | '/_layout/'
    | '/admin/'
    | '/auth/'
    | '/admin/roles/'
    | '/admin/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
  UserRoute: typeof UserRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRecoverPasswordRoute: typeof AuthRecoverPasswordRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
  AuthSignupRoute: typeof AuthSignupRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/user': {
      id: '/user'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/user/profile-edit': {
      id: '/user/profile-edit'
      path: '/profile-edit'
      fullPath: '/user/profile-edit'
      preLoaderRoute: typeof UserProfileEditRouteImport
      parentRoute: typeof UserRoute
    }
    '/user/profile': {
      id: '/user/profile'
      path: '/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof UserProfileRouteImport
      parentRoute: typeof UserRoute
    }
    '/user/change-password': {
      id: '/user/change-password'
      path: '/change-password'
      fullPath: '/user/change-password'
      preLoaderRoute: typeof UserChangePasswordRouteImport
      parentRoute: typeof UserRoute
    }
    '/user/appearance': {
      id: '/user/appearance'
      path: '/appearance'
      fullPath: '/user/appearance'
      preLoaderRoute: typeof UserAppearanceRouteImport
      parentRoute: typeof UserRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/reset-password': {
      id: '/auth/reset-password'
      path: '/auth/reset-password'
      fullPath: '/auth/reset-password'
      preLoaderRoute: typeof AuthResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/recover-password': {
      id: '/auth/recover-password'
      path: '/auth/recover-password'
      fullPath: '/auth/recover-password'
      preLoaderRoute: typeof AuthRecoverPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/roles/': {
      id: '/admin/roles/'
      path: '/roles'
      fullPath: '/admin/roles'
      preLoaderRoute: typeof AdminRolesIndexRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface AdminRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminIndexRoute: typeof AdminIndexRoute
  AdminRolesIndexRoute: typeof AdminRolesIndexRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRoute: AdminDashboardRoute,
  AdminIndexRoute: AdminIndexRoute,
  AdminRolesIndexRoute: AdminRolesIndexRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface UserRouteChildren {
  UserAppearanceRoute: typeof UserAppearanceRoute
  UserChangePasswordRoute: typeof UserChangePasswordRoute
  UserProfileRoute: typeof UserProfileRoute
  UserProfileEditRoute: typeof UserProfileEditRoute
}

const UserRouteChildren: UserRouteChildren = {
  UserAppearanceRoute: UserAppearanceRoute,
  UserChangePasswordRoute: UserChangePasswordRoute,
  UserProfileRoute: UserProfileRoute,
  UserProfileEditRoute: UserProfileEditRoute,
}

const UserRouteWithChildren = UserRoute._addFileChildren(UserRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
  UserRoute: UserRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
  AuthRecoverPasswordRoute: AuthRecoverPasswordRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthIndexRoute: AuthIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
